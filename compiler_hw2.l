/* Definition section */
%option nodefault
%{
#include <stdio.h>
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE

char store[87];

%}

/* Define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
double      {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*
elif		"else if"

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */

"+"   { return *yytext; }
"-"   { return *yytext; }
"*"   { return *yytext; }
"/"   { return *yytext; }
"%"	  { return *yytext; }
"++"  { return INCREMENT; }
"--"  { return DECREMENT; }

 /* Relational */
">"		{ return *yytext; }
"<"		{ return *yytext; }
">="	{ return GRE; }
"<="	{ return LSE; }
"=="	{ return EQU; }
"!="	{ return NEQ; }

 /* Assignment */
"="		{ return *yytext; }
"+="	{ return Add_Assign; }
"-="	{ return Sub_Assign; }
"*="	{ return Mul_Assign; }
"/="	{ return Div_Assign; }
"%="	{ return Mod_Assign; }

 /* Logical */
"&&"	{ return AND; }
"||"	{ return OR;}
"!"		{ return *yytext; }

 /* Delimiters */
"("		{ return *yytext; }
")"		{ return *yytext; }
"{"		{ return *yytext; }
"}"		{ return *yytext; }

 /* Print Keywords */	
"print"		{ return PRINT; }
"println"	{ return PRINTLN; }

 /* Condition and Loop Keywords */
"if"		{ return IF; }
"else"		{ return ELSE; }
{elif}		{ return ELIF;}
"for"		{ return FOR; }

 /* Declaration Keywords */
"var"		{ return VAR; }
"void"		{ return VOID; }
"int"		{ return INT; }
"float32"	{ return FLOAT; }

 /* String Constant */
\"				        { strcpy(store, ""); strcpy(store, yytext); BEGIN STRING_STATE;}
<STRING_STATE>\"		{ strcat(store, yytext); yylval.string = store; BEGIN INITIAL; return STRING;}
<STRING_STATE>[^"]*		{ strcat(store, yytext); }

 /* Number Constant */
{integer}	{ yylval.i_val = atoi(yytext); return I_CONST; }
{double}	{ yylval.f_val = atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ }
<COMMENT>\n			{ }
<COMMENT>"*"		{ }
<COMMENT>"*/"		{ BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ }

 /* Variable ID */
{id}       { yylval.string = yytext; return ID; }

 /* others */

[\n]	{ return NEWLINE; }
[ \t]		 /* Ignore */
[^; \t] 	 { return Other; } /* Ignore other charactor sets */
<<EOF>>    { return 0; } 

%%

int yywrap(){

	return 1;
}
